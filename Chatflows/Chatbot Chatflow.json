{
  "nodes": [
    {
      "width": 300,
      "height": 405,
      "id": "memoryVectorStore_0",
      "position": {
        "x": 1844.88052464165,
        "y": 484.60473328470243
      },
      "type": "customNode",
      "data": {
        "id": "memoryVectorStore_0",
        "label": "In-Memory Vector Store",
        "version": 1,
        "name": "memoryVectorStore",
        "type": "Memory",
        "baseClasses": [
          "Memory",
          "VectorStoreRetriever",
          "BaseRetriever"
        ],
        "category": "Vector Stores",
        "description": "In-memory vectorstore that stores embeddings and does an exact, linear search for the most similar embeddings.",
        "inputParams": [
          {
            "label": "Top K",
            "name": "topK",
            "description": "Number of top results to fetch. Default to 4",
            "placeholder": "4",
            "type": "number",
            "optional": true,
            "id": "memoryVectorStore_0-input-topK-number"
          }
        ],
        "inputAnchors": [
          {
            "label": "Document",
            "name": "document",
            "type": "Document",
            "list": true,
            "id": "memoryVectorStore_0-input-document-Document"
          },
          {
            "label": "Embeddings",
            "name": "embeddings",
            "type": "Embeddings",
            "id": "memoryVectorStore_0-input-embeddings-Embeddings"
          }
        ],
        "inputs": {
          "document": [
            "{{unstructuredFileLoader_0.data.instance}}"
          ],
          "embeddings": "{{openAIEmbeddings_0.data.instance}}",
          "topK": ""
        },
        "outputAnchors": [
          {
            "name": "output",
            "label": "Output",
            "type": "options",
            "options": [
              {
                "id": "memoryVectorStore_0-output-retriever-Memory|VectorStoreRetriever|BaseRetriever",
                "name": "retriever",
                "label": "Memory Retriever",
                "type": "Memory | VectorStoreRetriever | BaseRetriever"
              },
              {
                "id": "memoryVectorStore_0-output-vectorStore-Memory|VectorStore",
                "name": "vectorStore",
                "label": "Memory Vector Store",
                "type": "Memory | VectorStore"
              }
            ],
            "default": "retriever"
          }
        ],
        "outputs": {
          "output": "retriever"
        },
        "selected": false
      },
      "selected": false,
      "positionAbsolute": {
        "x": 1844.88052464165,
        "y": 484.60473328470243
      },
      "dragging": false
    },
    {
      "width": 300,
      "height": 530,
      "id": "conversationalRetrievalQAChain_0",
      "position": {
        "x": 2262.1986022669694,
        "y": 229.38589782758842
      },
      "type": "customNode",
      "data": {
        "id": "conversationalRetrievalQAChain_0",
        "label": "Conversational Retrieval QA Chain",
        "version": 3,
        "name": "conversationalRetrievalQAChain",
        "type": "ConversationalRetrievalQAChain",
        "baseClasses": [
          "ConversationalRetrievalQAChain",
          "BaseChain",
          "Runnable"
        ],
        "category": "Chains",
        "description": "Document QA - built on RetrievalQAChain to provide a chat history component",
        "inputParams": [
          {
            "label": "Return Source Documents",
            "name": "returnSourceDocuments",
            "type": "boolean",
            "optional": true,
            "id": "conversationalRetrievalQAChain_0-input-returnSourceDocuments-boolean"
          },
          {
            "label": "Rephrase Prompt",
            "name": "rephrasePrompt",
            "type": "string",
            "description": "Using previous chat history, rephrase question into a standalone question",
            "warning": "Prompt must include input variables: {chat_history} and {question}",
            "rows": 4,
            "additionalParams": true,
            "optional": true,
            "default": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.\n\nChat History:\n{chat_history}\nFollow Up Input: {question}\nStandalone Question:",
            "id": "conversationalRetrievalQAChain_0-input-rephrasePrompt-string"
          },
          {
            "label": "Response Prompt",
            "name": "responsePrompt",
            "type": "string",
            "description": "Taking the rephrased question, search for answer from the provided context",
            "warning": "Prompt must include input variable: {context}",
            "rows": 4,
            "additionalParams": true,
            "optional": true,
            "default": "You are a helpful assistant. Using the provided context, answer the user's question to the best of your ability using the resources provided.\nIf there is nothing in the context relevant to the question at hand, just say \"Hmm, I'm not sure.\" Don't try to make up an answer.\n------------\n{context}\n------------\nREMEMBER: If there is no relevant information within the context, just say \"Hmm, I'm not sure.\" Don't try to make up an answer.",
            "id": "conversationalRetrievalQAChain_0-input-responsePrompt-string"
          }
        ],
        "inputAnchors": [
          {
            "label": "Chat Model",
            "name": "model",
            "type": "BaseChatModel",
            "id": "conversationalRetrievalQAChain_0-input-model-BaseChatModel"
          },
          {
            "label": "Vector Store Retriever",
            "name": "vectorStoreRetriever",
            "type": "BaseRetriever",
            "id": "conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever"
          },
          {
            "label": "Memory",
            "name": "memory",
            "type": "BaseMemory",
            "optional": true,
            "description": "If left empty, a default BufferMemory will be used",
            "id": "conversationalRetrievalQAChain_0-input-memory-BaseMemory"
          },
          {
            "label": "Input Moderation",
            "description": "Detect text that could generate harmful output and prevent it from being sent to the language model",
            "name": "inputModeration",
            "type": "Moderation",
            "optional": true,
            "list": true,
            "id": "conversationalRetrievalQAChain_0-input-inputModeration-Moderation"
          }
        ],
        "inputs": {
          "inputModeration": "",
          "model": "{{chatOpenAI_0.data.instance}}",
          "vectorStoreRetriever": "{{memoryVectorStore_0.data.instance}}",
          "memory": "",
          "returnSourceDocuments": true,
          "rephrasePrompt": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.\n\nChat History:\n{chat_history}\nFollow Up Input: {question}\nStandalone Question:",
          "responsePrompt": "You are a helpful assistant. Using the provided context, answer the user's question to the best of your ability using the resources provided.\nIf there is nothing in the context relevant to the question at hand, just say \"Hmm, I'm not sure.\" Don't try to make up an answer.\n------------\n{context}\n------------\nREMEMBER: If there is no relevant information within the context, just say \"Hmm, I'm not sure.\" Don't try to make up an answer."
        },
        "outputAnchors": [
          {
            "id": "conversationalRetrievalQAChain_0-output-conversationalRetrievalQAChain-ConversationalRetrievalQAChain|BaseChain|Runnable",
            "name": "conversationalRetrievalQAChain",
            "label": "ConversationalRetrievalQAChain",
            "type": "ConversationalRetrievalQAChain | BaseChain | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": 2262.1986022669694,
        "y": 229.38589782758842
      }
    },
    {
      "width": 300,
      "height": 669,
      "id": "chatOpenAI_0",
      "position": {
        "x": 1848.10147093022,
        "y": -213.12507406389523
      },
      "type": "customNode",
      "data": {
        "id": "chatOpenAI_0",
        "label": "ChatOpenAI",
        "version": 6,
        "name": "chatOpenAI",
        "type": "ChatOpenAI",
        "baseClasses": [
          "ChatOpenAI",
          "BaseChatModel",
          "BaseLanguageModel"
        ],
        "category": "Chat Models",
        "description": "Wrapper around OpenAI large language models that use the Chat endpoint",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "openAIApi"
            ],
            "id": "chatOpenAI_0-input-credential-credential"
          },
          {
            "label": "Model Name",
            "name": "modelName",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "default": "gpt-3.5-turbo",
            "id": "chatOpenAI_0-input-modelName-options"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "default": 0.9,
            "optional": true,
            "id": "chatOpenAI_0-input-temperature-number"
          },
          {
            "label": "Max Tokens",
            "name": "maxTokens",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-maxTokens-number"
          },
          {
            "label": "Top Probability",
            "name": "topP",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-topP-number"
          },
          {
            "label": "Frequency Penalty",
            "name": "frequencyPenalty",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-frequencyPenalty-number"
          },
          {
            "label": "Presence Penalty",
            "name": "presencePenalty",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-presencePenalty-number"
          },
          {
            "label": "Timeout",
            "name": "timeout",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-timeout-number"
          },
          {
            "label": "BasePath",
            "name": "basepath",
            "type": "string",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-basepath-string"
          },
          {
            "label": "BaseOptions",
            "name": "baseOptions",
            "type": "json",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-baseOptions-json"
          },
          {
            "label": "Allow Image Uploads",
            "name": "allowImageUploads",
            "type": "boolean",
            "description": "Automatically uses gpt-4-vision-preview when image is being uploaded from chat. Only works with LLMChain, Conversation Chain, ReAct Agent, and Conversational Agent",
            "default": false,
            "optional": true,
            "id": "chatOpenAI_0-input-allowImageUploads-boolean"
          },
          {
            "label": "Image Resolution",
            "description": "This parameter controls the resolution in which the model views the image.",
            "name": "imageResolution",
            "type": "options",
            "options": [
              {
                "label": "Low",
                "name": "low"
              },
              {
                "label": "High",
                "name": "high"
              },
              {
                "label": "Auto",
                "name": "auto"
              }
            ],
            "default": "low",
            "optional": false,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-imageResolution-options"
          }
        ],
        "inputAnchors": [
          {
            "label": "Cache",
            "name": "cache",
            "type": "BaseCache",
            "optional": true,
            "id": "chatOpenAI_0-input-cache-BaseCache"
          }
        ],
        "inputs": {
          "modelName": "gpt-3.5-turbo",
          "temperature": 0.9,
          "maxTokens": "",
          "topP": "",
          "frequencyPenalty": "",
          "presencePenalty": "",
          "timeout": "",
          "basepath": "",
          "baseOptions": "",
          "allowImageUploads": true,
          "imageResolution": "low"
        },
        "outputAnchors": [
          {
            "id": "chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel",
            "name": "chatOpenAI",
            "label": "ChatOpenAI",
            "type": "ChatOpenAI | BaseChatModel | BaseLanguageModel"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "selected": false,
      "positionAbsolute": {
        "x": 1848.10147093022,
        "y": -213.12507406389523
      },
      "dragging": false
    },
    {
      "width": 300,
      "height": 423,
      "id": "openAIEmbeddings_0",
      "position": {
        "x": 1114.6807349284306,
        "y": 482.2324008293234
      },
      "type": "customNode",
      "data": {
        "id": "openAIEmbeddings_0",
        "label": "OpenAI Embeddings",
        "version": 4,
        "name": "openAIEmbeddings",
        "type": "OpenAIEmbeddings",
        "baseClasses": [
          "OpenAIEmbeddings",
          "Embeddings"
        ],
        "category": "Embeddings",
        "description": "OpenAI API to generate embeddings for a given text",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "openAIApi"
            ],
            "id": "openAIEmbeddings_0-input-credential-credential"
          },
          {
            "label": "Model Name",
            "name": "modelName",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "default": "text-embedding-ada-002",
            "id": "openAIEmbeddings_0-input-modelName-asyncOptions"
          },
          {
            "label": "Strip New Lines",
            "name": "stripNewLines",
            "type": "boolean",
            "optional": true,
            "additionalParams": true,
            "id": "openAIEmbeddings_0-input-stripNewLines-boolean"
          },
          {
            "label": "Batch Size",
            "name": "batchSize",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "id": "openAIEmbeddings_0-input-batchSize-number"
          },
          {
            "label": "Timeout",
            "name": "timeout",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "id": "openAIEmbeddings_0-input-timeout-number"
          },
          {
            "label": "BasePath",
            "name": "basepath",
            "type": "string",
            "optional": true,
            "additionalParams": true,
            "id": "openAIEmbeddings_0-input-basepath-string"
          },
          {
            "label": "Dimensions",
            "name": "dimensions",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "id": "openAIEmbeddings_0-input-dimensions-number"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "modelName": "text-embedding-ada-002",
          "stripNewLines": "",
          "batchSize": "",
          "timeout": "",
          "basepath": "",
          "dimensions": ""
        },
        "outputAnchors": [
          {
            "id": "openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings",
            "name": "openAIEmbeddings",
            "label": "OpenAIEmbeddings",
            "description": "OpenAI API to generate embeddings for a given text",
            "type": "OpenAIEmbeddings | Embeddings"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": 1114.6807349284306,
        "y": 482.2324008293234
      }
    },
    {
      "id": "stickyNote_0",
      "position": {
        "x": 1119.05414840041,
        "y": 304.34680059348875
      },
      "type": "stickyNote",
      "data": {
        "id": "stickyNote_0",
        "label": "Sticky Note",
        "version": 2,
        "name": "stickyNote",
        "type": "StickyNote",
        "baseClasses": [
          "StickyNote"
        ],
        "tags": [
          "Utilities"
        ],
        "category": "Utilities",
        "description": "Add a sticky note",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNote_0-input-note-string"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "Recursively load files from Github repo, and split into chunks according to Markdown syntax.\n\nFor private repo, you need to connect Github credential."
        },
        "outputAnchors": [
          {
            "id": "stickyNote_0-output-stickyNote-StickyNote",
            "name": "stickyNote",
            "label": "StickyNote",
            "description": "Add a sticky note",
            "type": "StickyNote"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 143,
      "selected": false,
      "positionAbsolute": {
        "x": 1119.05414840041,
        "y": 304.34680059348875
      },
      "dragging": false
    },
    {
      "id": "stickyNote_1",
      "position": {
        "x": 1481.99061810943,
        "y": 600.8550429213293
      },
      "type": "stickyNote",
      "data": {
        "id": "stickyNote_1",
        "label": "Sticky Note",
        "version": 2,
        "name": "stickyNote",
        "type": "StickyNote",
        "baseClasses": [
          "StickyNote"
        ],
        "tags": [
          "Utilities"
        ],
        "category": "Utilities",
        "description": "Add a sticky note",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNote_1-input-note-string"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "Store the embeddings in-memory"
        },
        "outputAnchors": [
          {
            "id": "stickyNote_1-output-stickyNote-StickyNote",
            "name": "stickyNote",
            "label": "StickyNote",
            "description": "Add a sticky note",
            "type": "StickyNote"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 42,
      "selected": false,
      "positionAbsolute": {
        "x": 1481.99061810943,
        "y": 600.8550429213293
      },
      "dragging": false
    },
    {
      "id": "stickyNote_2",
      "position": {
        "x": 2599.168985347108,
        "y": 244.87044713398404
      },
      "type": "stickyNote",
      "data": {
        "id": "stickyNote_2",
        "label": "Sticky Note",
        "version": 2,
        "name": "stickyNote",
        "type": "StickyNote",
        "baseClasses": [
          "StickyNote"
        ],
        "tags": [
          "Utilities"
        ],
        "category": "Utilities",
        "description": "Add a sticky note",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNote_2-input-note-string"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "Conversational Retrieval QA Chain composes of 2 chains:\n\n1. A chain to rephrase user question using previous conversations\n2. A chain to provide response based on the context fetched from vector store.\n\nWhy is the need for rephrasing question?\nThis is to ensure that a follow-up question can be asked. For example:\n\n- What is the address of the Bakery shop?\n- What about the opening time?\n\nA rephrased question will be:\n- What is the opening time of the Bakery shop?\n\nThis ensure a better search to vector store, hence better output quality.\n"
        },
        "outputAnchors": [
          {
            "id": "stickyNote_2-output-stickyNote-StickyNote",
            "name": "stickyNote",
            "label": "StickyNote",
            "description": "Add a sticky note",
            "type": "StickyNote"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 465,
      "selected": false,
      "positionAbsolute": {
        "x": 2599.168985347108,
        "y": 244.87044713398404
      },
      "dragging": false
    },
    {
      "id": "pdfFile_0",
      "position": {
        "x": 1481.4824152472513,
        "y": -106.32103968141107
      },
      "type": "customNode",
      "data": {
        "id": "pdfFile_0",
        "label": "Pdf File",
        "version": 1,
        "name": "pdfFile",
        "type": "Document",
        "baseClasses": [
          "Document"
        ],
        "category": "Document Loaders",
        "description": "Load data from PDF files",
        "inputParams": [
          {
            "label": "Pdf File",
            "name": "pdfFile",
            "type": "file",
            "fileType": ".pdf",
            "id": "pdfFile_0-input-pdfFile-file"
          },
          {
            "label": "Usage",
            "name": "usage",
            "type": "options",
            "options": [
              {
                "label": "One document per page",
                "name": "perPage"
              },
              {
                "label": "One document per file",
                "name": "perFile"
              }
            ],
            "default": "perPage",
            "id": "pdfFile_0-input-usage-options"
          },
          {
            "label": "Use Legacy Build",
            "name": "legacyBuild",
            "type": "boolean",
            "optional": true,
            "additionalParams": true,
            "id": "pdfFile_0-input-legacyBuild-boolean"
          },
          {
            "label": "Additional Metadata",
            "name": "metadata",
            "type": "json",
            "description": "Additional metadata to be added to the extracted documents",
            "optional": true,
            "additionalParams": true,
            "id": "pdfFile_0-input-metadata-json"
          },
          {
            "label": "Omit Metadata Keys",
            "name": "omitMetadataKeys",
            "type": "string",
            "rows": 4,
            "description": "Each document loader comes with a default set of metadata keys that are extracted from the document. You can use this field to omit some of the default metadata keys. The value should be a list of keys, seperated by comma. Use * to omit all metadata keys execept the ones you specify in the Additional Metadata field",
            "placeholder": "key1, key2, key3.nestedKey1",
            "optional": true,
            "additionalParams": true,
            "id": "pdfFile_0-input-omitMetadataKeys-string"
          }
        ],
        "inputAnchors": [
          {
            "label": "Text Splitter",
            "name": "textSplitter",
            "type": "TextSplitter",
            "optional": true,
            "id": "pdfFile_0-input-textSplitter-TextSplitter"
          }
        ],
        "inputs": {
          "textSplitter": "{{recursiveCharacterTextSplitter_0.data.instance}}",
          "usage": "perPage",
          "legacyBuild": "",
          "metadata": "",
          "omitMetadataKeys": ""
        },
        "outputAnchors": [
          {
            "id": "pdfFile_0-output-pdfFile-Document",
            "name": "pdfFile",
            "label": "Document",
            "description": "Load data from PDF files",
            "type": "Document"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 507,
      "selected": false,
      "positionAbsolute": {
        "x": 1481.4824152472513,
        "y": -106.32103968141107
      },
      "dragging": false
    },
    {
      "id": "recursiveCharacterTextSplitter_0",
      "position": {
        "x": 1094.8585247057483,
        "y": -172.4540735898261
      },
      "type": "customNode",
      "data": {
        "id": "recursiveCharacterTextSplitter_0",
        "label": "Recursive Character Text Splitter",
        "version": 2,
        "name": "recursiveCharacterTextSplitter",
        "type": "RecursiveCharacterTextSplitter",
        "baseClasses": [
          "RecursiveCharacterTextSplitter",
          "TextSplitter",
          "BaseDocumentTransformer",
          "Runnable"
        ],
        "category": "Text Splitters",
        "description": "Split documents recursively by different characters - starting with \"\\n\\n\", then \"\\n\", then \" \"",
        "inputParams": [
          {
            "label": "Chunk Size",
            "name": "chunkSize",
            "type": "number",
            "description": "Number of characters in each chunk. Default is 1000.",
            "default": 1000,
            "optional": true,
            "id": "recursiveCharacterTextSplitter_0-input-chunkSize-number"
          },
          {
            "label": "Chunk Overlap",
            "name": "chunkOverlap",
            "type": "number",
            "description": "Number of characters to overlap between chunks. Default is 200.",
            "default": 200,
            "optional": true,
            "id": "recursiveCharacterTextSplitter_0-input-chunkOverlap-number"
          },
          {
            "label": "Custom Separators",
            "name": "separators",
            "type": "string",
            "rows": 4,
            "description": "Array of custom separators to determine when to split the text, will override the default separators",
            "placeholder": "[\"|\", \"##\", \">\", \"-\"]",
            "additionalParams": true,
            "optional": true,
            "id": "recursiveCharacterTextSplitter_0-input-separators-string"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "chunkSize": 1000,
          "chunkOverlap": 200,
          "separators": ""
        },
        "outputAnchors": [
          {
            "id": "recursiveCharacterTextSplitter_0-output-recursiveCharacterTextSplitter-RecursiveCharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable",
            "name": "recursiveCharacterTextSplitter",
            "label": "RecursiveCharacterTextSplitter",
            "description": "Split documents recursively by different characters - starting with \"\\n\\n\", then \"\\n\", then \" \"",
            "type": "RecursiveCharacterTextSplitter | TextSplitter | BaseDocumentTransformer | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 429,
      "selected": false,
      "positionAbsolute": {
        "x": 1094.8585247057483,
        "y": -172.4540735898261
      },
      "dragging": false
    },
    {
      "id": "characterTextSplitter_0",
      "position": {
        "x": 1075.7054659510352,
        "y": -786.6059144911201
      },
      "type": "customNode",
      "data": {
        "id": "characterTextSplitter_0",
        "label": "Character Text Splitter",
        "version": 1,
        "name": "characterTextSplitter",
        "type": "CharacterTextSplitter",
        "baseClasses": [
          "CharacterTextSplitter",
          "TextSplitter",
          "BaseDocumentTransformer",
          "Runnable"
        ],
        "category": "Text Splitters",
        "description": "splits only on one type of character (defaults to \"\\n\\n\").",
        "inputParams": [
          {
            "label": "Chunk Size",
            "name": "chunkSize",
            "type": "number",
            "description": "Number of characters in each chunk. Default is 1000.",
            "default": 1000,
            "optional": true,
            "id": "characterTextSplitter_0-input-chunkSize-number"
          },
          {
            "label": "Chunk Overlap",
            "name": "chunkOverlap",
            "type": "number",
            "description": "Number of characters to overlap between chunks. Default is 200.",
            "default": 200,
            "optional": true,
            "id": "characterTextSplitter_0-input-chunkOverlap-number"
          },
          {
            "label": "Custom Separator",
            "name": "separator",
            "type": "string",
            "placeholder": "\" \"",
            "description": "Separator to determine when to split the text, will override the default separator",
            "optional": true,
            "id": "characterTextSplitter_0-input-separator-string"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "chunkSize": "1001",
          "chunkOverlap": 200,
          "separator": ""
        },
        "outputAnchors": [
          {
            "id": "characterTextSplitter_0-output-characterTextSplitter-CharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable",
            "name": "characterTextSplitter",
            "label": "CharacterTextSplitter",
            "description": "splits only on one type of character (defaults to \"\\n\\n\").",
            "type": "CharacterTextSplitter | TextSplitter | BaseDocumentTransformer | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 475,
      "selected": false,
      "positionAbsolute": {
        "x": 1075.7054659510352,
        "y": -786.6059144911201
      },
      "dragging": false
    },
    {
      "id": "csvFile_0",
      "position": {
        "x": 1480.3409034399829,
        "y": -691.8707587475891
      },
      "type": "customNode",
      "data": {
        "id": "csvFile_0",
        "label": "Csv File",
        "version": 2,
        "name": "csvFile",
        "type": "Document",
        "baseClasses": [
          "Document"
        ],
        "category": "Document Loaders",
        "description": "Load data from CSV files",
        "inputParams": [
          {
            "label": "Csv File",
            "name": "csvFile",
            "type": "file",
            "fileType": ".csv",
            "id": "csvFile_0-input-csvFile-file"
          },
          {
            "label": "Single Column Extraction",
            "name": "columnName",
            "type": "string",
            "description": "Extracting a single column",
            "placeholder": "Enter column name",
            "optional": true,
            "id": "csvFile_0-input-columnName-string"
          },
          {
            "label": "Additional Metadata",
            "name": "metadata",
            "type": "json",
            "description": "Additional metadata to be added to the extracted documents",
            "optional": true,
            "additionalParams": true,
            "id": "csvFile_0-input-metadata-json"
          },
          {
            "label": "Omit Metadata Keys",
            "name": "omitMetadataKeys",
            "type": "string",
            "rows": 4,
            "description": "Each document loader comes with a default set of metadata keys that are extracted from the document. You can use this field to omit some of the default metadata keys. The value should be a list of keys, seperated by comma. Use * to omit all metadata keys execept the ones you specify in the Additional Metadata field",
            "placeholder": "key1, key2, key3.nestedKey1",
            "optional": true,
            "additionalParams": true,
            "id": "csvFile_0-input-omitMetadataKeys-string"
          }
        ],
        "inputAnchors": [
          {
            "label": "Text Splitter",
            "name": "textSplitter",
            "type": "TextSplitter",
            "optional": true,
            "id": "csvFile_0-input-textSplitter-TextSplitter"
          }
        ],
        "inputs": {
          "textSplitter": "{{characterTextSplitter_0.data.instance}}",
          "columnName": "",
          "metadata": "",
          "omitMetadataKeys": ""
        },
        "outputAnchors": [
          {
            "name": "output",
            "label": "Output",
            "type": "options",
            "description": "Array of document objects containing metadata and pageContent",
            "options": [
              {
                "id": "csvFile_0-output-document-Document|json",
                "name": "document",
                "label": "Document",
                "description": "Array of document objects containing metadata and pageContent",
                "type": "Document | json"
              },
              {
                "id": "csvFile_0-output-text-string|json",
                "name": "text",
                "label": "Text",
                "description": "Concatenated string from pageContent of documents",
                "type": "string | json"
              }
            ],
            "default": "document"
          }
        ],
        "outputs": {
          "output": "document"
        },
        "selected": false
      },
      "width": 300,
      "height": 536,
      "selected": false,
      "positionAbsolute": {
        "x": 1480.3409034399829,
        "y": -691.8707587475891
      },
      "dragging": false
    },
    {
      "id": "unstructuredFileLoader_0",
      "position": {
        "x": 522.4224253632274,
        "y": -775.4953945525845
      },
      "type": "customNode",
      "data": {
        "id": "unstructuredFileLoader_0",
        "label": "Unstructured File Loader",
        "version": 3,
        "name": "unstructuredFileLoader",
        "type": "Document",
        "baseClasses": [
          "Document"
        ],
        "category": "Document Loaders",
        "description": "Use Unstructured.io to load data from a file path",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "unstructuredApi"
            ],
            "optional": true,
            "id": "unstructuredFileLoader_0-input-credential-credential"
          },
          {
            "label": "File Path",
            "name": "filePath",
            "type": "string",
            "placeholder": "",
            "optional": true,
            "warning": "Use the File Upload instead of File path. If file is uploaded, this path is ignored. Path will be deprecated in future releases.",
            "id": "unstructuredFileLoader_0-input-filePath-string"
          },
          {
            "label": "Files Upload",
            "name": "fileObject",
            "type": "file",
            "description": "Files to be processed. Multiple files can be uploaded.",
            "fileType": ".txt, .text, .pdf, .docx, .doc, .jpg, .jpeg, .eml, .html, .htm, .md, .pptx, .ppt, .msg, .rtf, .xlsx, .xls, .odt, .epub",
            "id": "unstructuredFileLoader_0-input-fileObject-file"
          },
          {
            "label": "Unstructured API URL",
            "name": "unstructuredAPIUrl",
            "description": "Unstructured API URL. Read <a target=\"_blank\" href=\"https://unstructured-io.github.io/unstructured/introduction.html#getting-started\">more</a> on how to get started",
            "type": "string",
            "default": "http://localhost:8000/general/v0/general",
            "id": "unstructuredFileLoader_0-input-unstructuredAPIUrl-string"
          },
          {
            "label": "Strategy",
            "name": "strategy",
            "description": "The strategy to use for partitioning PDF/image. Options are fast, hi_res, auto. Default: auto.",
            "type": "options",
            "options": [
              {
                "label": "Hi-Res",
                "name": "hi_res"
              },
              {
                "label": "Fast",
                "name": "fast"
              },
              {
                "label": "OCR Only",
                "name": "ocr_only"
              },
              {
                "label": "Auto",
                "name": "auto"
              }
            ],
            "optional": true,
            "additionalParams": true,
            "default": "auto",
            "id": "unstructuredFileLoader_0-input-strategy-options"
          },
          {
            "label": "Encoding",
            "name": "encoding",
            "description": "The encoding method used to decode the text input. Default: utf-8.",
            "type": "string",
            "optional": true,
            "additionalParams": true,
            "default": "utf-8",
            "id": "unstructuredFileLoader_0-input-encoding-string"
          },
          {
            "label": "Skip Infer Table Types",
            "name": "skipInferTableTypes",
            "description": "The document types that you want to skip table extraction with. Default: pdf, jpg, png.",
            "type": "multiOptions",
            "options": [
              {
                "label": "doc",
                "name": "doc"
              },
              {
                "label": "docx",
                "name": "docx"
              },
              {
                "label": "eml",
                "name": "eml"
              },
              {
                "label": "epub",
                "name": "epub"
              },
              {
                "label": "heic",
                "name": "heic"
              },
              {
                "label": "htm",
                "name": "htm"
              },
              {
                "label": "html",
                "name": "html"
              },
              {
                "label": "jpeg",
                "name": "jpeg"
              },
              {
                "label": "jpg",
                "name": "jpg"
              },
              {
                "label": "md",
                "name": "md"
              },
              {
                "label": "msg",
                "name": "msg"
              },
              {
                "label": "odt",
                "name": "odt"
              },
              {
                "label": "pdf",
                "name": "pdf"
              },
              {
                "label": "png",
                "name": "png"
              },
              {
                "label": "ppt",
                "name": "ppt"
              },
              {
                "label": "pptx",
                "name": "pptx"
              },
              {
                "label": "rtf",
                "name": "rtf"
              },
              {
                "label": "text",
                "name": "text"
              },
              {
                "label": "txt",
                "name": "txt"
              },
              {
                "label": "xls",
                "name": "xls"
              },
              {
                "label": "xlsx",
                "name": "xlsx"
              }
            ],
            "optional": true,
            "additionalParams": true,
            "default": "[\"pdf\", \"jpg\", \"png\"]",
            "id": "unstructuredFileLoader_0-input-skipInferTableTypes-multiOptions"
          },
          {
            "label": "Hi-Res Model Name",
            "name": "hiResModelName",
            "description": "The name of the inference model used when strategy is hi_res. Default: detectron2_onnx.",
            "type": "options",
            "options": [
              {
                "label": "chipper",
                "name": "chipper",
                "description": "Exlusive to Unstructured hosted API. The Chipper model is Unstructured in-house image-to-text model based on transformer-based Visual Document Understanding (VDU) models."
              },
              {
                "label": "detectron2_onnx",
                "name": "detectron2_onnx",
                "description": "A Computer Vision model by Facebook AI that provides object detection and segmentation algorithms with ONNX Runtime. It is the fastest model with the hi_res strategy."
              },
              {
                "label": "yolox",
                "name": "yolox",
                "description": "A single-stage real-time object detector that modifies YOLOv3 with a DarkNet53 backbone."
              },
              {
                "label": "yolox_quantized",
                "name": "yolox_quantized",
                "description": "Runs faster than YoloX and its speed is closer to Detectron2."
              }
            ],
            "optional": true,
            "additionalParams": true,
            "default": "detectron2_onnx",
            "id": "unstructuredFileLoader_0-input-hiResModelName-options"
          },
          {
            "label": "Chunking Strategy",
            "name": "chunkingStrategy",
            "description": "Use one of the supported strategies to chunk the returned elements. When omitted, no chunking is performed and any other chunking parameters provided are ignored. Default: by_title",
            "type": "options",
            "options": [
              {
                "label": "None",
                "name": "None"
              },
              {
                "label": "By Title",
                "name": "by_title"
              }
            ],
            "optional": true,
            "additionalParams": true,
            "default": "by_title",
            "id": "unstructuredFileLoader_0-input-chunkingStrategy-options"
          },
          {
            "label": "OCR Languages",
            "name": "ocrLanguages",
            "description": "The languages to use for OCR. Note: Being depricated as languages is the new type. Pending langchain update.",
            "type": "multiOptions",
            "options": [
              {
                "label": "English",
                "name": "eng"
              },
              {
                "label": "Spanish (Español)",
                "name": "spa"
              },
              {
                "label": "Mandarin Chinese (普通话)",
                "name": "cmn"
              },
              {
                "label": "Hindi (हिन्दी)",
                "name": "hin"
              },
              {
                "label": "Arabic (اَلْعَرَبِيَّةُ)",
                "name": "ara"
              },
              {
                "label": "Portuguese (Português)",
                "name": "por"
              },
              {
                "label": "Bengali (বাংলা)",
                "name": "ben"
              },
              {
                "label": "Russian (Русский)",
                "name": "rus"
              },
              {
                "label": "Japanese (日本語)",
                "name": "jpn"
              },
              {
                "label": "Punjabi (ਪੰਜਾਬੀ)",
                "name": "pan"
              },
              {
                "label": "German (Deutsch)",
                "name": "deu"
              },
              {
                "label": "Korean (한국어)",
                "name": "kor"
              },
              {
                "label": "French (Français)",
                "name": "fra"
              },
              {
                "label": "Italian (Italiano)",
                "name": "ita"
              },
              {
                "label": "Vietnamese (Tiếng Việt)",
                "name": "vie"
              }
            ],
            "optional": true,
            "additionalParams": true,
            "id": "unstructuredFileLoader_0-input-ocrLanguages-multiOptions"
          },
          {
            "label": "Source ID Key",
            "name": "sourceIdKey",
            "type": "string",
            "description": "Key used to get the true source of document, to be compared against the record. Document metadata must contain the Source ID Key.",
            "default": "source",
            "placeholder": "source",
            "optional": true,
            "additionalParams": true,
            "id": "unstructuredFileLoader_0-input-sourceIdKey-string"
          },
          {
            "label": "Coordinates",
            "name": "coordinates",
            "type": "boolean",
            "description": "If true, return coordinates for each element. Default: false.",
            "optional": true,
            "additionalParams": true,
            "default": false,
            "id": "unstructuredFileLoader_0-input-coordinates-boolean"
          },
          {
            "label": "XML Keep Tags",
            "name": "xmlKeepTags",
            "description": "If True, will retain the XML tags in the output. Otherwise it will simply extract the text from within the tags. Only applies to partition_xml.",
            "type": "boolean",
            "optional": true,
            "additionalParams": true,
            "id": "unstructuredFileLoader_0-input-xmlKeepTags-boolean"
          },
          {
            "label": "Include Page Breaks",
            "name": "includePageBreaks",
            "description": "When true, the output will include page break elements when the filetype supports it.",
            "type": "boolean",
            "optional": true,
            "additionalParams": true,
            "id": "unstructuredFileLoader_0-input-includePageBreaks-boolean"
          },
          {
            "label": "XML Keep Tags",
            "name": "xmlKeepTags",
            "description": "Whether to keep XML tags in the output.",
            "type": "boolean",
            "optional": true,
            "additionalParams": true,
            "id": "unstructuredFileLoader_0-input-xmlKeepTags-boolean"
          },
          {
            "label": "Multi-Page Sections",
            "name": "multiPageSections",
            "description": "Whether to treat multi-page documents as separate sections.",
            "type": "boolean",
            "optional": true,
            "additionalParams": true,
            "id": "unstructuredFileLoader_0-input-multiPageSections-boolean"
          },
          {
            "label": "Combine Under N Chars",
            "name": "combineUnderNChars",
            "description": "If chunking strategy is set, combine elements until a section reaches a length of n chars. Default: value of max_characters. Can't exceed value of max_characters.",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "id": "unstructuredFileLoader_0-input-combineUnderNChars-number"
          },
          {
            "label": "New After N Chars",
            "name": "newAfterNChars",
            "description": "If chunking strategy is set, cut off new sections after reaching a length of n chars (soft max). value of max_characters. Can't exceed value of max_characters.",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "id": "unstructuredFileLoader_0-input-newAfterNChars-number"
          },
          {
            "label": "Max Characters",
            "name": "maxCharacters",
            "description": "If chunking strategy is set, cut off new sections after reaching a length of n chars (hard max). Default: 500",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "default": "500",
            "id": "unstructuredFileLoader_0-input-maxCharacters-number"
          },
          {
            "label": "Additional Metadata",
            "name": "metadata",
            "type": "json",
            "description": "Additional metadata to be added to the extracted documents",
            "optional": true,
            "additionalParams": true,
            "id": "unstructuredFileLoader_0-input-metadata-json"
          },
          {
            "label": "Omit Metadata Keys",
            "name": "omitMetadataKeys",
            "type": "string",
            "rows": 4,
            "description": "Each document loader comes with a default set of metadata keys that are extracted from the document. You can use this field to omit some of the default metadata keys. The value should be a list of keys, seperated by comma. Use * to omit all metadata keys execept the ones you specify in the Additional Metadata field",
            "placeholder": "key1, key2, key3.nestedKey1",
            "optional": true,
            "additionalParams": true,
            "id": "unstructuredFileLoader_0-input-omitMetadataKeys-string"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "filePath": "",
          "unstructuredAPIUrl": "http://localhost:9500/general/v0/general",
          "strategy": "auto",
          "encoding": "utf-8",
          "skipInferTableTypes": "[\"pdf\", \"jpg\", \"png\"]",
          "hiResModelName": "yolox",
          "chunkingStrategy": "by_title",
          "ocrLanguages": "",
          "sourceIdKey": "source",
          "coordinates": "",
          "xmlKeepTags": "",
          "includePageBreaks": "",
          "multiPageSections": "",
          "combineUnderNChars": "",
          "newAfterNChars": "",
          "maxCharacters": "500",
          "metadata": "",
          "omitMetadataKeys": ""
        },
        "outputAnchors": [
          {
            "id": "unstructuredFileLoader_0-output-unstructuredFileLoader-Document",
            "name": "unstructuredFileLoader",
            "label": "Document",
            "description": "Use Unstructured.io to load data from a file path",
            "type": "Document"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 768,
      "selected": false,
      "positionAbsolute": {
        "x": 522.4224253632274,
        "y": -775.4953945525845
      },
      "dragging": false
    }
  ],
  "edges": [
    {
      "source": "memoryVectorStore_0",
      "sourceHandle": "memoryVectorStore_0-output-retriever-Memory|VectorStoreRetriever|BaseRetriever",
      "target": "conversationalRetrievalQAChain_0",
      "targetHandle": "conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever",
      "type": "buttonedge",
      "id": "memoryVectorStore_0-memoryVectorStore_0-output-retriever-Memory|VectorStoreRetriever|BaseRetriever-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever",
      "data": {
        "label": ""
      }
    },
    {
      "source": "chatOpenAI_0",
      "sourceHandle": "chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel",
      "target": "conversationalRetrievalQAChain_0",
      "targetHandle": "conversationalRetrievalQAChain_0-input-model-BaseChatModel",
      "type": "buttonedge",
      "id": "chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-model-BaseChatModel",
      "data": {
        "label": ""
      }
    },
    {
      "source": "openAIEmbeddings_0",
      "sourceHandle": "openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings",
      "target": "memoryVectorStore_0",
      "targetHandle": "memoryVectorStore_0-input-embeddings-Embeddings",
      "type": "buttonedge",
      "id": "openAIEmbeddings_0-openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings-memoryVectorStore_0-memoryVectorStore_0-input-embeddings-Embeddings",
      "data": {
        "label": ""
      }
    },
    {
      "source": "recursiveCharacterTextSplitter_0",
      "sourceHandle": "recursiveCharacterTextSplitter_0-output-recursiveCharacterTextSplitter-RecursiveCharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable",
      "target": "pdfFile_0",
      "targetHandle": "pdfFile_0-input-textSplitter-TextSplitter",
      "type": "buttonedge",
      "id": "recursiveCharacterTextSplitter_0-recursiveCharacterTextSplitter_0-output-recursiveCharacterTextSplitter-RecursiveCharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable-pdfFile_0-pdfFile_0-input-textSplitter-TextSplitter"
    },
    {
      "source": "characterTextSplitter_0",
      "sourceHandle": "characterTextSplitter_0-output-characterTextSplitter-CharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable",
      "target": "csvFile_0",
      "targetHandle": "csvFile_0-input-textSplitter-TextSplitter",
      "type": "buttonedge",
      "id": "characterTextSplitter_0-characterTextSplitter_0-output-characterTextSplitter-CharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable-csvFile_0-csvFile_0-input-textSplitter-TextSplitter"
    },
    {
      "source": "unstructuredFileLoader_0",
      "sourceHandle": "unstructuredFileLoader_0-output-unstructuredFileLoader-Document",
      "target": "memoryVectorStore_0",
      "targetHandle": "memoryVectorStore_0-input-document-Document",
      "type": "buttonedge",
      "id": "unstructuredFileLoader_0-unstructuredFileLoader_0-output-unstructuredFileLoader-Document-memoryVectorStore_0-memoryVectorStore_0-input-document-Document"
    }
  ]
}